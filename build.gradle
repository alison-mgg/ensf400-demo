buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.spacialcircumstances:gradle-cucumber-reporting:0.1.23"
    }
}

plugins {
    id 'war'
    id 'org.gretty' version '3.1.5'
    id "org.flywaydb.flyway" version "6.0.8"
    id "org.sonarqube" version "3.0"
    id 'jacoco'
    id "com.dorongold.task-tree" version "1.4"
    id 'info.solidsoft.pitest' version '1.5.1'
    id "org.owasp.dependencycheck" version "6.1.6"
    id 'org.hidetake.ssh' version '2.10.1'
    id "org.checkerframework" version "0.5.0"
    id "java-library"
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    implementation group: 'me.gosimple', name: 'nbvcxz', version: '1.4.3'
    testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.1.13'
    testImplementation 'io.cucumber:cucumber-java:5.7.0'
    testImplementation 'io.cucumber:cucumber-junit:5.7.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.2'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    implementation "org.flywaydb:flyway-core:6.4.1"
    implementation group: 'net.bull.javamelody', name: 'javamelody-core', version: '1.85.0'
}

task copyH2JarToLib(type: Copy) {
    from configurations.localDeps
    into "$buildDir/lib"
}

task startH2Console(type: Exec) {
    dependsOn 'copyH2JarToLib'
    commandLine 'javaw', '-cp', 'build/lib/h2-1.4.199.jar', 'org.h2.tools.Console'
}

gretty {
    httpPort = 8080
    servletContainer = 'tomcat9'
    contextPath = "demo"
    def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
    jvmArgs = ["-javaagent:$jacocoAgent=output=tcpserver,address=localhost,port=6300", '-Dcom.sun.management.jmxremote', '-Dcom.sun.management.jmxremote.port=9999', '-Dcom.sun.management.jmxremote.ssl=false', '-Dcom.sun.management.jmxremote.authenticate=false']
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "--release" << "17"
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    failFast = true
    testLogging {
        exceptionFormat "full"
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showStandardStreams true
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    executionData(fileTree(dir: "$buildDir/jacoco", include: '*.exec'))
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
        html.destination file("${buildDir}/reports/jacoco")
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "$projectname"
        property "sonar.projectName", "$projectname"
        property "sonar.projectDescription", "A demonstration of a web application with good test coverage and best practices"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java,src/integration_test/java,src/bdd_test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test/,build/test-results/integrate"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml"
    }
}

pitest {
    targetClasses = ['com.coveros.training.authentication.RegisterServlet', 'com.coveros.training.authentication.RegisterServletTests']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}

dependencyCheck {
    scanConfigurations = ['default']
    showSummary = false
    autoUpdate = true
    cveValidForHours = 24 * 30 * 12 // about a year.
    format = 'HTML' // options are (HTML, XML, CSV, JSON, VULN, ALL).
    failBuildOnCVSS = 8 // see https://www.first.org/cvss/specification-document#5-Qualitative-Severity-Rating-Scale
}

task runApiTests(type: Exec) {
    doFirst {
        checkIfAlive()
    }
    workingDir 'src/api_tests'
    commandLine 'pipenv', 'run', 'pytest', '--junitxml', '../../build/test-results/api_tests/TEST-api_test_results.xml'
}

static boolean SearchDirectoryForChromedriver(File dir) {
    return dir.listFiles({ file -> file.name.contains("chromedriver") } as FileFilter).any()
}

static boolean ScanPathForChromeDriver() {
    // Add all the directories from the system PATH variable
    List pathDirectories = System.getenv('PATH').split("[;|:]").toList()

    pathDirectories.add("ui_tests")

    return pathDirectories.any({ dir -> SearchDirectoryForChromedriver(new File(dir)) })
}

task('writeGitCommitToFile') {
    File file = new File("src/main/webapp/commit.html")
    file.write(getCurrentGitHash())
}

static String getCurrentGitHash() {
    String headFileLocation = ".git/HEAD"
    String commitLocation
    int locationOfSpace
    String currentHead
    FileReader fr_forGitHead
    FileReader fr_forGitHash
    String result
    boolean shouldExit = false

    try {
        fr_forGitHead = new FileReader(headFileLocation)
    } catch (Exception ignored) {
        return "NO_GIT_HEAD_FOUND"
    }

    new BufferedReader(fr_forGitHead).with { br ->
        // get the directory to the current HEAD
        result = "EMPTY_INITIAL_VALUE"
        try {
            currentHead = br.readLine()
        } catch (Exception ignored) {
            result = "COULD_NOT_READ_HEAD_FILE"
            shouldExit = true
        }
        finally {
            br.close()
        }
        locationOfSpace = currentHead.indexOf(" ")
        // extract out the portion that is the directory only
        // the whole contents go something like: "ref: refs/heads/master"
        commitLocation = currentHead.substring(locationOfSpace + 1)
        // read the file at that location (e.g. .git/refs/heads/master )
    }
    if (shouldExit) {
        return result
    }

    try {
        fr_forGitHash = new FileReader(".git/" + commitLocation)
    } catch (Exception ignored) {
        return "NO_GIT_HASH_FILE_FOUND"
    }

    new BufferedReader(fr_forGitHash).with { br ->
        result = "EMPTY_AT_BEGINNING"
        try {
            result = br.readLine()
        } catch (Exception ignored) {
            result = "COULD_NOT_READ_COMMIT_HASH"
        } finally {
            br.close()
        }
    }
    return result
}

compileJava.finalizedBy writeGitCommitToFile

// returns true if the application is running.
static void checkIfAlive() {
    int code
    try {
        URL url = new URL("http://localhost:8080/demo")
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        connection.connect()

        code = connection.getResponseCode()
    } catch (Exception ignored) {
        String errorMsg = "\n\n\n" +
                "****************************************\n" +
                "*       SERVER IS NOT RUNNING          *\n" +
                "****************************************\n" +
                " The server has to be running to run    \n" +
                " tests you requested                    \n" +
                "                                        \n" +
                " To start the app:                      \n" +
                "    gradlew apprun                   \n" +
                "****************************************\n"
        throw new Exception(errorMsg)
    }
    if (code != 200) {
        throw new Exception("\n\nServer is not returning a 200.  Instead, it is: " + code + "\n\n")
    }
}

task runAllTests(type: GradleBuild) {
    doFirst {
        checkIfAlive()
    }
    tasks = ['check', 'runApiTests', 'runBehaveTests']
    finalizedBy(jacocoTestReport)
}

wrapper {
    gradleVersion = '7.6' // or the latest supported version
}
